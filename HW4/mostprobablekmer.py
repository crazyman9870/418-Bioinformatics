'''
Given a profile matrix Profile, we can evaluate the probability of every k-mer in a string Text and find a 
Profile-most probable k-mer in Text, i.e., a k-mer that was most likely to have been generated by Profile
among all k-mers in Text. For example, ACGGGGATTACC is the Profile-most probable 12-mer in GGTACGGGGATTACCT.
Indeed, every other 12-mer in this string has probability 0.

In general, if there are multiple Profile-most probable k-mers in Text, then we select the first such k-mer occurring in Text.

Given: A string Text, an integer k, and a 4 Ã— k matrix Profile.
Return: A Profile-most probable k-mer in Text. (If multiple answers exist, you may return any one.)

Given:
ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
5
0.2 0.2 0.3 0.2 0.3
0.4 0.3 0.1 0.5 0.1
0.3 0.3 0.5 0.2 0.4
0.1 0.2 0.1 0.1 0.2

Return:
CCGAG
'''

import sys


def calculateprob(kmer, probmatrix, k):
	probability = 0.0
	for i in range(k):
		if kmer[i] == 'A':
			probability += float(probmatrix[0][i])
		if kmer[i] == 'C':
			probability += float(probmatrix[1][i])
		if kmer[i] == 'G':
			probability += float(probmatrix[2][i])
		if kmer[i] == 'T':
			probability += float(probmatrix[3][i])

	return probability
      

with open(sys.argv[1]) as file:

	seq = next(file).strip()
	k = int(next(file).strip())
	probs = []

	for i in range(4):
		probs.append(next(file).strip().split(' '))

	kmerhigh = ''
	probhigh = 0.0
	for i in range(len(seq) - k + 1):
		kmer = seq[i:(i+k)]
		prob = calculateprob(kmer, probs, k)
		if prob > probhigh:
			kmerhigh = kmer
			probhigh = prob

	print(kmerhigh)


		#print(kmer)
	#print(seq)
	#print(k)
	#print(probs)